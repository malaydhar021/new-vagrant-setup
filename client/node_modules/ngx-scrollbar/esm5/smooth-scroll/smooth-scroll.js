/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { supportsScrollBehavior } from '@angular/cdk/platform';
import { from, of, animationFrameScheduler } from 'rxjs';
/**
 * @record
 */
export function SmoothScrollOptions() { }
if (false) {
    /** @type {?|undefined} */
    SmoothScrollOptions.prototype.top;
    /** @type {?|undefined} */
    SmoothScrollOptions.prototype.left;
    /** @type {?} */
    SmoothScrollOptions.prototype.offsetTop;
    /** @type {?} */
    SmoothScrollOptions.prototype.offsetLeft;
    /** @type {?} */
    SmoothScrollOptions.prototype.duration;
    /** @type {?} */
    SmoothScrollOptions.prototype.scrollFunc;
    /** @type {?} */
    SmoothScrollOptions.prototype.easeFunc;
}
/**
 * @record
 */
export function ScrollToOptions() { }
if (false) {
    /** @type {?|undefined} */
    ScrollToOptions.prototype.top;
    /** @type {?|undefined} */
    ScrollToOptions.prototype.left;
    /** @type {?|undefined} */
    ScrollToOptions.prototype.duration;
    /** @type {?|undefined} */
    ScrollToOptions.prototype.easeFunc;
}
var SmoothScroll = /** @class */ (function () {
    function SmoothScroll(_platform, el) {
        this._platform = _platform;
        this.view = el.nativeElement;
    }
    /**
     * @private
     * @param {?} left
     * @param {?} top
     * @return {?}
     */
    SmoothScroll.prototype.scrollFunc = /**
     * @private
     * @param {?} left
     * @param {?} top
     * @return {?}
     */
    function (left, top) {
        if (supportsScrollBehavior()) {
            this.view.scrollTo({ top: top, left: left });
        }
        else {
            this.view.scrollTop = top;
            this.view.scrollLeft = left;
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    SmoothScroll.prototype.scrollTo = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        // Avoid SSR error
        if (isPlatformBrowser(this._platform)) {
            /** @type {?} */
            var scrollFunc = function (left, top) {
                if (supportsScrollBehavior()) {
                    _this.view.scrollTo({ top: top, left: left });
                }
                else {
                    _this.view.scrollTop = top;
                    _this.view.scrollLeft = left;
                }
            };
            if (options.duration) {
                /** @type {?} */
                var smoothScrollOptions = {
                    top: options.top,
                    left: options.left,
                    duration: options.duration,
                    easeFunc: options.easeFunc || easeInOutQuad,
                    offsetTop: this.view.scrollTop,
                    offsetLeft: this.view.scrollLeft,
                    scrollFunc: scrollFunc
                };
                return from(smoothScroll(smoothScrollOptions));
            }
            this.scrollFunc(options.left, options.top);
        }
        return of();
    };
    /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollToElement = /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (selector, offset, duration, easeFunc) {
        if (offset === void 0) { offset = 0; }
        /** @type {?} */
        var target = this.view.querySelector(selector);
        return target ? this.scrollTo({ left: target.offsetLeft, top: target.offsetTop - offset, duration: duration, easeFunc: easeFunc }) : of();
    };
    /**
     * @param {?} left
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollXTo = /**
     * @param {?} left
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (left, duration, easeFunc) {
        return this.scrollTo({ left: left, duration: duration, easeFunc: easeFunc });
    };
    /**
     * @param {?} top
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollYTo = /**
     * @param {?} top
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (top, duration, easeFunc) {
        return this.scrollTo({ top: top, duration: duration, easeFunc: easeFunc });
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollToTop = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.scrollYTo(0, duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollToBottom = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.scrollYTo(this.view.scrollHeight - this.view.clientHeight, duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollToRight = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.scrollXTo(this.view.scrollWidth, duration, easeFunc);
    };
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    SmoothScroll.prototype.scrollToLeft = /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    function (duration, easeFunc) {
        return this.scrollXTo(0, duration, easeFunc);
    };
    SmoothScroll.decorators = [
        { type: Directive, args: [{
                    selector: '[smoothScroll], [smooth-scroll]'
                },] }
    ];
    /** @nocollapse */
    SmoothScroll.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef }
    ]; };
    return SmoothScroll;
}());
export { SmoothScroll };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SmoothScroll.prototype.view;
    /**
     * @type {?}
     * @private
     */
    SmoothScroll.prototype._platform;
}
/**
 * @param {?} options
 * @return {?}
 */
export function smoothScroll(options) {
    return new Promise(function (resolve) {
        /** @type {?} */
        var currentTime = 0;
        /** @type {?} */
        var increment = 10;
        /** @type {?} */
        var valX = options.offsetLeft;
        /** @type {?} */
        var valY = options.offsetTop;
        /** @type {?} */
        var animateScroll = function () {
            // increment the time
            currentTime += increment;
            // find the value with the easing function
            if (typeof options.left !== 'undefined') {
                /** @type {?} */
                var deltaX = options.left - options.offsetLeft;
                valX = options.easeFunc(currentTime, options.offsetLeft, deltaX, options.duration);
            }
            if (typeof options.top !== 'undefined') {
                /** @type {?} */
                var deltaY = options.top - options.offsetTop;
                valY = options.easeFunc(currentTime, options.offsetTop, deltaY, options.duration);
            }
            // scroll to position
            options.scrollFunc(valX, valY);
            // do the animation unless its over
            if (currentTime < options.duration) {
                animationFrameScheduler.schedule(animateScroll);
            }
            else {
                resolve();
            }
        };
        animateScroll();
    });
}
// easing functions http://goo.gl/5HLl8
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
export function easeInOutQuad(t, b, c, d) {
    t /= d / 2;
    if (t < 1) {
        return (c / 2) * t * t + b;
    }
    t--;
    return (-c / 2) * (t * (t - 2) - 1) + b;
}
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
export function easeInCubic(t, b, c, d) {
    /** @type {?} */
    var tc = (t /= d) * t * t;
    return b + c * tc;
}
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
export function inOutQuintic(t, b, c, d) {
    /** @type {?} */
    var ts = (t /= d) * t;
    /** @type {?} */
    var tc = ts * t;
    return b + c * (6 * tc * ts + -15 * ts * ts + 10 * tc);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21vb3RoLXNjcm9sbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zY3JvbGxiYXIvIiwic291cmNlcyI6WyJzbW9vdGgtc2Nyb2xsL3Ntb290aC1zY3JvbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0QsT0FBTyxFQUFjLElBQUksRUFBRSxFQUFFLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFJckUseUNBUUM7OztJQVBDLGtDQUFhOztJQUNiLG1DQUFjOztJQUNkLHdDQUFrQjs7SUFDbEIseUNBQW1COztJQUNuQix1Q0FBaUI7O0lBQ2pCLHlDQUFnRDs7SUFDaEQsdUNBQStCOzs7OztBQUdqQyxxQ0FLQzs7O0lBSkMsOEJBQWE7O0lBQ2IsK0JBQWM7O0lBQ2QsbUNBQWtCOztJQUNsQixtQ0FBZ0M7O0FBR2xDO0lBT0Usc0JBQXlDLFNBQWlCLEVBQzlDLEVBQWM7UUFEZSxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBRXhELElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUMvQixDQUFDOzs7Ozs7O0lBRU8saUNBQVU7Ozs7OztJQUFsQixVQUFtQixJQUFZLEVBQUUsR0FBVztRQUMxQyxJQUFJLHNCQUFzQixFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxHQUFHLEtBQUEsRUFBRSxJQUFJLE1BQUEsRUFBQyxDQUFDLENBQUM7U0FDakM7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztZQUMxQixJQUFJLENBQUMsSUFBSSxD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QUFVLFdBQVcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTOztRQUM5RCxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQixDQUFDOzs7Ozs7OztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUzs7UUFDL0QsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7O1FBQ3JCLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBzdXBwb3J0c1Njcm9sbEJlaGF2aW9yIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgb2YsIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgdHlwZSBTbW9vdGhTY3JvbGxFYXNlRnVuYyA9ICh0OiBudW1iZXIsIHM6IG51bWJlciwgYzogbnVtYmVyLCBkOiBudW1iZXIpID0+IG51bWJlcjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU21vb3RoU2Nyb2xsT3B0aW9ucyB7XHJcbiAgdG9wPzogbnVtYmVyO1xyXG4gIGxlZnQ/OiBudW1iZXI7XHJcbiAgb2Zmc2V0VG9wOiBudW1iZXI7XHJcbiAgb2Zmc2V0TGVmdDogbnVtYmVyO1xyXG4gIGR1cmF0aW9uOiBudW1iZXI7XHJcbiAgc2Nyb2xsRnVuYzogKHRvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgZWFzZUZ1bmM6IFNtb290aFNjcm9sbEVhc2VGdW5jO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbFRvT3B0aW9ucyB7XHJcbiAgdG9wPzogbnVtYmVyO1xyXG4gIGxlZnQ/OiBudW1iZXI7XHJcbiAgZHVyYXRpb24/OiBudW1iZXI7XHJcbiAgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYztcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbc21vb3RoU2Nyb2xsXSwgW3Ntb290aC1zY3JvbGxdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU21vb3RoU2Nyb2xsIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSB2aWV3OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBfcGxhdGZvcm06IE9iamVjdCxcclxuICAgICAgICAgICAgICBlbDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy52aWV3ID0gZWwubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2Nyb2xsRnVuYyhsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyKSB7XHJcbiAgICBpZiAoc3VwcG9ydHNTY3JvbGxCZWhhdmlvcigpKSB7XHJcbiAgICAgIHRoaXMudmlldy5zY3JvbGxUbyh7dG9wLCBsZWZ0fSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnZpZXcuc2Nyb2xsVG9wID0gdG9wO1xyXG4gICAgICB0aGlzLnZpZXcuc2Nyb2xsTGVmdCA9IGxlZnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzY3JvbGxUbyhvcHRpb25zOiBTY3JvbGxUb09wdGlvbnMpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIC8vIEF2b2lkIFNTUiBlcnJvclxyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuX3BsYXRmb3JtKSkge1xyXG4gICAgICBjb25zdCBzY3JvbGxGdW5jID0gKGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAoc3VwcG9ydHNTY3JvbGxCZWhhdmlvcigpKSB7XHJcbiAgICAgICAgICB0aGlzLnZpZXcuc2Nyb2xsVG8oe3RvcCwgbGVmdH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnZpZXcuc2Nyb2xsVG9wID0gdG9wO1xyXG4gICAgICAgICAgdGhpcy52aWV3LnNjcm9sbExlZnQgPSBsZWZ0O1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgaWYgKG9wdGlvbnMuZHVyYXRpb24pIHtcclxuICAgICAgICBjb25zdCBzbW9vdGhTY3JvbGxPcHRpb25zOiBTbW9vdGhTY3JvbGxPcHRpb25zID0ge1xyXG4gICAgICAgICAgdG9wOiBvcHRpb25zLnRvcCxcclxuICAgICAgICAgIGxlZnQ6IG9wdGlvbnMubGVmdCxcclxuICAgICAgICAgIGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxyXG4gICAgICAgICAgZWFzZUZ1bmM6IG9wdGlvbnMuZWFzZUZ1bmMgfHwgZWFzZUluT3V0UXVhZCxcclxuICAgICAgICAgIG9mZnNldFRvcDogdGhpcy52aWV3LnNjcm9sbFRvcCxcclxuICAgICAgICAgIG9mZnNldExlZnQ6IHRoaXMudmlldy5zY3JvbGxMZWZ0LFxyXG4gICAgICAgICAgc2Nyb2xsRnVuY1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGZyb20oc21vb3RoU2Nyb2xsKHNtb290aFNjcm9sbE9wdGlvbnMpKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNjcm9sbEZ1bmMob3B0aW9ucy5sZWZ0LCBvcHRpb25zLnRvcCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2Y8dm9pZD4oKTtcclxuICB9XHJcblxyXG4gIHNjcm9sbFRvRWxlbWVudChzZWxlY3Rvcjogc3RyaW5nLCBvZmZzZXQgPSAwLCBkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgY29uc3QgdGFyZ2V0OiBIVE1MRWxlbWVudCA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgIHJldHVybiB0YXJnZXQgPyB0aGlzLnNjcm9sbFRvKHtsZWZ0OiB0YXJnZXQub2Zmc2V0TGVmdCwgdG9wOiB0YXJnZXQub2Zmc2V0VG9wIC0gb2Zmc2V0LCBkdXJhdGlvbiwgZWFzZUZ1bmN9KSA6IG9mPHZvaWQ+KCk7XHJcbiAgfVxyXG5cclxuICBzY3JvbGxYVG8obGVmdDogbnVtYmVyLCBkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsVG8oe2xlZnQsIGR1cmF0aW9uLCBlYXNlRnVuY30pO1xyXG4gIH1cclxuXHJcbiAgc2Nyb2xsWVRvKHRvcDogbnVtYmVyLCBkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsVG8oe3RvcCwgZHVyYXRpb24sIGVhc2VGdW5jfSk7XHJcbiAgfVxyXG5cclxuICBzY3JvbGxUb1RvcChkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsWVRvKDAsIGR1cmF0aW9uLCBlYXNlRnVuYyk7XHJcbiAgfVxyXG5cclxuICBzY3JvbGxUb0JvdHRvbShkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsWVRvKHRoaXMudmlldy5zY3JvbGxIZWlnaHQgLSB0aGlzLnZpZXcuY2xpZW50SGVpZ2h0LCBkdXJhdGlvbiwgZWFzZUZ1bmMpO1xyXG4gIH1cclxuXHJcbiAgc2Nyb2xsVG9SaWdodChkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsWFRvKHRoaXMudmlldy5zY3JvbGxXaWR0aCwgZHVyYXRpb24sIGVhc2VGdW5jKTtcclxuICB9XHJcblxyXG4gIHNjcm9sbFRvTGVmdChkdXJhdGlvbj86IG51bWJlciwgZWFzZUZ1bmM/OiBTbW9vdGhTY3JvbGxFYXNlRnVuYyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsWFRvKDAsIGR1cmF0aW9uLCBlYXNlRnVuYyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoU2Nyb2xsKG9wdGlvbnM6IFNtb290aFNjcm9sbE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xyXG4gICAgY29uc3QgaW5jcmVtZW50ID0gMTA7XHJcbiAgICBsZXQgdmFsWCA9IG9wdGlvbnMub2Zmc2V0TGVmdDtcclxuICAgIGxldCB2YWxZID0gb3B0aW9ucy5vZmZzZXRUb3A7XHJcblxyXG4gICAgY29uc3QgYW5pbWF0ZVNjcm9sbCA9ICgpID0+IHtcclxuICAgICAgLy8gaW5jcmVtZW50IHRoZSB0aW1lXHJcbiAgICAgIGN1cnJlbnRUaW1lICs9IGluY3JlbWVudDtcclxuICAgICAgLy8gZmluZCB0aGUgdmFsdWUgd2l0aCB0aGUgZWFzaW5nIGZ1bmN0aW9uXHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sZWZ0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IG9wdGlvbnMubGVmdCAtIG9wdGlvbnMub2Zmc2V0TGVmdDtcclxuICAgICAgICB2YWxYID0gb3B0aW9ucy5lYXNlRnVuYyhjdXJyZW50VGltZSwgb3B0aW9ucy5vZmZzZXRMZWZ0LCBkZWx0YVgsIG9wdGlvbnMuZHVyYXRpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50b3AgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29uc3QgZGVsdGFZID0gb3B0aW9ucy50b3AgLSBvcHRpb25zLm9mZnNldFRvcDtcclxuICAgICAgICB2YWxZID0gb3B0aW9ucy5lYXNlRnVuYyhjdXJyZW50VGltZSwgb3B0aW9ucy5vZmZzZXRUb3AsIGRlbHRhWSwgb3B0aW9ucy5kdXJhdGlvbik7XHJcbiAgICAgIH1cclxuICAgICAgLy8gc2Nyb2xsIHRvIHBvc2l0aW9uXHJcbiAgICAgIG9wdGlvbnMuc2Nyb2xsRnVuYyh2YWxYLCB2YWxZKTtcclxuICAgICAgLy8gZG8gdGhlIGFuaW1hdGlvbiB1bmxlc3MgaXRzIG92ZXJcclxuICAgICAgaWYgKGN1cnJlbnRUaW1lIDwgb3B0aW9ucy5kdXJhdGlvbikge1xyXG4gICAgICAgIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLnNjaGVkdWxlKGFuaW1hdGVTY3JvbGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFuaW1hdGVTY3JvbGwoKTtcclxuICB9KTtcclxufVxyXG5cclxuLy8gZWFzaW5nIGZ1bmN0aW9ucyBodHRwOi8vZ29vLmdsLzVITGw4XHJcbmV4cG9ydCBmdW5jdGlvbiBlYXNlSW5PdXRRdWFkKHQ6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlcikge1xyXG4gIHQgLz0gZCAvIDI7XHJcbiAgaWYgKHQgPCAxKSB7XHJcbiAgICByZXR1cm4gKGMgLyAyKSAqIHQgKiB0ICsgYjtcclxuICB9XHJcbiAgdC0tO1xyXG4gIHJldHVybiAoLWMgLyAyKSAqICh0ICogKHQgLSAyKSAtIDEpICsgYjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVhc2VJbkN1YmljKHQ6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlcikge1xyXG4gIGNvbnN0IHRjID0gKHQgLz0gZCkgKiB0ICogdDtcclxuICByZXR1cm4gYiArIGMgKiB0YztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluT3V0UXVpbnRpYyh0OiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyLCBkOiBudW1iZXIpIHtcclxuICBjb25zdCB0cyA9ICh0IC89IGQpICogdCxcclxuICAgIHRjID0gdHMgKiB0O1xyXG4gIHJldHVybiBiICsgYyAqICg2ICogdGMgKiB0cyArIC0xNSAqIHRzICogdHMgKyAxMCAqIHRjKTtcclxufVxyXG4iXX0=